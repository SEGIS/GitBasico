CURSO CLASE PRACTICA GIT Y GITHUB
https://www.youtube.com/watch?v=NmbqlkLTOSI&t=3993s

Otra referencia https://esparta.github.io/gitimmersion-spanish/lab_05.html
book the git: https://git-scm.com/book/en/v2


Dos opciones para trabajar con Git/GitHug

1.- Empezar a trabajar en local con un repositorio que yo me cree en mi directorio local

	1.1-  git config --gloabal user.name "yourname"
		#Sets the default name for git to use when you commit
	1.2-  git config --global user.email "youremail."
		#Sets the default email for git to use when you commit
	1.3- git init, git add, git commit (repositorio local)
	1.4 .- Crear repositorio en GitHub
	1.5.- Vincular el repositorio remoto de Github con el repositorio local
		"git remote add nombredelremoto urldelrepositorio"
        ver si está vinculado: "git remote -v"
    1.6.- Empujar los cambios locales al remoto 
    		"git push nombredelremoto nombredelmaster"
    		git push remoto master

2.- Crear primero el repositorio en GitHub y luego trabajar en local con dicho repositorio.
 a.- Crear el proyecto en GitHub
 b.- Ir a local y clonar con gitcone <url-github>
 c.- git add <nombre>
 d.- git commit -m "Mensaje"
 e.- git push origin master



TRUCOS

git log --oneline
git add .           ---> añade todos los archivos modifiacos al repo local



https://git-scm.com/book/es/v1/Ramificaciones-en-Git-Reorganizando-el-trabajo-realizado


CRONOLOGIA

git init
git add
git commi 
git remote add nombredelremoto urldelrepositorio
git push nombredelremoto nombredelmasterlocal
git status
git log
--modificación--
git status
--rectificación antes de staging--
git checkout <file>
git add
--rectificación despues de staging--
git reset HEAD <file>
git add .
git commit -m ""
--rectificación después del commit--
git revert HEA --no-edit

--Etiquetas--
git tag v1
git checkout v1^    -> va al padre
git tag -d v1      -> quita tags


--Enmmendar--
git add <file>
git commit -m "simple"
git add <file>
git commit --amend -m "add somthing"


-- rama --
git checkout -b newbranch
-- renombrar rama --
git branch j-m <oldname> <newname>

